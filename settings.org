#+name: settings
#+PROPERTY: header-args :tangle yes

* fix annoying stuff

#+begin_src emacs-lisp

  ;;stop init screen
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
* move files around
#+begin_src emacs-lisp
  ;; save all cache stuff into .cache
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs"))

  ;; keep emacs clean
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  (make-directory (expand-file-name "tmp/auto-saves" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	  auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))


  (setq create-lockfiles nil)

  ;;set custom file
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+end_src
* Fonts
#+begin_src emacs-lisp
    ;;font
    (set-face-attribute 'default nil :font "FiraCode NFM" :height 140)
#+end_src
* Useful settings
#+begin_src emacs-lisp
  ;;show matching delimters
  (show-paren-mode)

  ;;add matching closing delimiter
  (electric-pair-mode)

  ;;make trailing white space visiable for trimming
  (setq-default show-trailing-whitespace t)

  ;;set line numbers to be shown
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src
* Themes
#+begin_src emacs-lisp
  ;;set theme
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-acario-dark t)
    )
#+end_src
* Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode))

  (use-package evil-snipe
    :ensure t
    :config
    (require 'evil-snipe)
    (evil-snipe-override-mode 1)
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
    )

    (use-package undo-tree
      :ensure t
      :after evil
      :config
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
      (evil-set-undo-system 'undo-tree)
      (global-undo-tree-mode 1)
    )

#+end_src
* Random
#+begin_src emacs-lisp

  (use-package general
    :ensure t
    :init
    (general-evil-setup)
    )
  ;; Replace 'hydra-space/body with your leader function.


  (use-package avy
    :ensure t
    :config
    (general-define-key
    :states '(normal visual)
    :prefix "SPC"
    "jj" 'avy-goto-char)
    )

    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '(
			      (recents . 5)
			      (projects . 5)
			      (agenda . 5)
			      )
	    )

      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
      (setq dashboard-set-init-info t)
      (setq dashboard-set-navigator t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      )
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    )

  (use-package page-break-lines
    :ensure t
    :init
    (global-page-break-lines-mode)
    )

  ;; (use-package vterm
  ;;   :ensure t)
#+end_src
* Ivy and Projectile
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind (
	   :map ivy-minibuffer-map
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   )
    )

  (use-package counsel
    :ensure t
    :bind ("M-x" . counsel-M-x)
    :init
    (general-define-key
    :states '(normal visual)
    :prefix "SPC"
    "ff" 'counsel-find-file)
    )
  (use-package counsel-projectile
    :ensure t
    :init
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     "pp" 'counsel-projectile-switch-project)
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     "fg" 'counsel-projectile-rg)
    )
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :config (setq which-key-idle-delay 1)
    )

  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :config
    (setq projectile-project-search-path '("~/projects/" "~/school/"))
    )
#+end_src
* Development tools
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    )
  (use-package company
    :ensure t
    :after lsp-mode
    :hook ('after-init-hook 'global-company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    )

  (use-package magit
    :ensure t
    :config
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     "mg" 'magit
     )
    )

  (use-package tree-sitter
    :ensure t
    )

  (use-package tree-sitter-langs
    :ensure t
    :config
    (require 'tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  )

  ;; get the correct path
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (daemonp)
(exec-path-from-shell-initialize))
    )

#+end_src
* Snippets
#+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (add-hook 'prog-mode-hook #'yas-minor-mode)
      )

    (use-package yasnippet-snippets
      :ensure t)
#+end_src

* LSP

#+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :hook (
	     (c-mode . lsp)
	     (c++-mode . lsp)
	     (rust-mode . lsp)
	     (go-mode-hook . lsp)
	     (lsp-mode . lsp-enable-which-key-integration)
	     (html-mode . lsp)
	     )
      :config
      (general-define-key
       :states '(normal visual)
       :prefix "SPC"
       "lf" 'lsp-format-buffer)
      (general-define-key
       :states '(normal visual)
       :prefix "SPC"
       "ca" 'lsp-execute-code-action)
      (general-define-key
       :states '(normal visual)
       :prefix "SPC"
       "rn" 'lsp-rename)

      )

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)

    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)


    (use-package lsp-pyright
      :ensure t
      :hook (python-mode . (lambda ()
	      (require 'lsp-pyright)
	      (lsp))
	     )
      )
#+end_src

* Rust

#+begin_src emacs-lisp
    (use-package rust-mode
      :ensure t
      :config
      )
#+end_src

* Golang

#+begin_src emacs-lisp
    (use-package go-mode
      :ensure t)
#+end_src
* Docker
#+begin_src emacs-lisp



  (use-package dockerfile-mode
    :ensure t)

  (use-package docker
    :ensure t
    :config
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     "dc" 'docker
     )
    )

  (use-package docker-tramp
    :ensure t)
#+end_src
* Python
#+begin_src emacs-lisp
  (use-package poetry
    :ensure t
    )



#+end_src
